-------------------------------------------------------------------------------
--             Formatted_Output_NG package for Ada documentation             --
-------------------------------------------------------------------------------

Right justification is the default for all data types.

Escape sequences in format strings:
   \n   line feed
   \r   carriage return
   \b   backspace
   \t   horizontal tab
   \f   form feed

----------------------------
Format sequences for strings
----------------------------
%[flags][<width>]s

Flag characters can be:
   +, >   The converted value is to be right adjusted on the field boundary.
          (The default is left justification.)
   -, <   The converted value is to be left adjusted on the field boundary.
          (This is default.)
   ^      The converted value is to be center adjusted on the field boundary.
          (The default is left justification.)

<width>:
   number   Decimal number specifying minimal field width.
   *        The width is not specified in the format string, but as an
            additional integer value argument preceding the argument that has
            to be formatted.

Examples:
   +"%s" & "Hello"                      "Hello"
   +"%9s" & "Hello"                     "    Hello"
   +"%*s" & 9 & "Hello"                 "    Hello"
   +"%-7s" & "Hello"                    "Hello  "
   +"%^11s" & "Hello"                   "   Hello   "

--------------------------------------
Format sequences for enumeration types
--------------------------------------
%[flags][<width>](c|l|u|m)

Flag characters can be:
   +, >   The converted value is to be right adjusted on the field boundary.
          (This is default.)
   -, <   The converted value is to be left adjusted on the field boundary.
          (The default is right justification.)
   ^      The converted value is to be center adjusted on the field boundary.
          (The default is right justification.)

<width>:
   number   Decimal number specifying minimal field width.
   *        The width is not specified in the format string, but as an
            additional integer value argument preceding the argument that has
            to be formatted.

Format specifier can be:
   c   convert capitalized.
   l   convert in lower case.
   u   convert in upper case.
   m   convert in mixed case.

Examples:
   +"%u" & Red                          "RED"
   +"%9u" & Red                         "      RED"
   +"%-7c" & Red                        "Red    "
   +"%^11l" & Red                       "    red    "
   +"%^*l" & 11 & Red                   "    red    "
   +"%m" & BLACK_WHITE                  "Black_White"

----------------------------------------------
Format sequences for integer and modular types
----------------------------------------------
%[flags][<width>](d|x|X|o|b)

Flag characters can be:
   -, <   The converted value is to be left adjusted on the field boundary.
          (The default is right justification.)
   ^      The converted value is to be center adjusted on the field boundary.
          (The default is right justification.)
   +      A sign (+ or -) should always be placed before a number produced by a
          signed conversion. By default, a sign is used only for negative numbers.
   #      Used with o, x or X specifiers the value is use with Base in C style.
   ~      As above, but using Ada style based <base>#<number>#
   0      The value should be zero padded.
   _      The output is to be grouped with grouping character '_'.
          Group size is 3 for Base = 10 and 4 for other.
   '      For decimal conversion (d) the output is to be grouped with thousands'
          grouping characters if the locale information indicates any.

<width>:
   number   Decimal number specifying minimal field width.
   *        The width is not specified in the format string, but as an
            additional integer value argument preceding the argument that has
            to be formatted.

Format specifier can be:
   d   Convert as decimal.
   x   Convert as hexadecimal (lowercase).
   X   Convert as hexadecimal (uppercase).
   o   Convert as octal.
   b   Convert as binary.

Examples:
   +"%d" & 123                          "123"
   +"%d" & -123                         "-123"
   +"%x" & 123                          "7b"
   +"%b" & 123                          "1111011"
   +"%_b" & 123                         "111_1011"
   +"%8X" & 123                         "      7B"
   +"%08x" & 123                        "0000007b"
   +"%^7d" & 123                        "  123  "
   +"%0*d" & 8 & -123                   "-0000123"

-----------------------------------------
Format sequences for floating point types
-----------------------------------------
%[flags][<width>[.<width_aft>]](e|f|g)

Flag characters can be:
   -, <   The converted value is to be left adjusted on the field boundary.
          (The default is right justification.)
   ^      The converted value is to be center adjusted on the field boundary.
          (The default is right justification.)
   +      A sign (+ or -) should always be placed before a number produced by a
          signed conversion. By default, a sign is used only for negative numbers.
   0      The value should be zero padded.
   _      The output is to be grouped with grouping character '_'. Group size is 3.
   '      The output is to be grouped with thousands' grouping characters if the
          locale information indicates any.

<width>:
   number   Decimal number specifying minimal field width.
   *        The width is not specified in the format string, but as an
            additional integer value argument preceding the argument that has
            to be formatted.

.<width_aft>:
   .number  Decimal number specifying number of digits after decimal point.
   .*       The precision is not specified in the format string, but as an
            additional integer value argument preceding the argument that has
            to be formatted.

Format specifier can be:
   e   Convert to exponential representation. Uses the letter 'e' (lowercase).
   E   Convert to exponential representation. Uses the letter 'E' (uppercase).
   f   Convert without exponent field.
   g   Convert to shortest representation without any trailing zeroes.

Examples:
   +"%E" & 1234.5                       "1.23450E+03"
   +"%f" & 1234.5                       "1234.50000"
   +"%g" & 1234.5                       "1234.5"
   +"%10.3e" & 1234.5                   " 1.235e+03"
   +"%10.3f" & 1234.5                   "  1234.500"
   +"%10.3g" & 1234.5                   "    1234.5"
   +"%010.3e" & 1234.5                  "01.235e+03"
   +"%010.3f" & 1234.5                  "001234.500"
   +"%_010.3g" & 1234.5                 "00_001_234.5"
   +"'%0*.*f'" & 10 & 2 & 23.67768      "0000023.68"

--------------------------------------
Format sequences for fixed point types
--------------------------------------
%[flags][<width>[.<width_aft>]](f|g)

Flag characters can be:
   -, <   The converted value is to be left adjusted on the field boundary.
          (The default is right justification.)
   ^      The converted value is to be center adjusted on the field boundary.
          (The default is right justification.)
   +      A sign (+ or -) should always be placed before a number produced by a
          signed conversion. By default, a sign is used only for negative numbers.
   0      The value should be zero padded.
   _      The output is to be grouped with grouping character '_'. Group size is 3.
   '      The output is to be grouped with thousands' grouping characters if the
          locale information indicates any.

<width>:
   number   Decimal number specifying minimal field width.
   *        The width is not specified in the format string, but as an
            additional integer value argument preceding the argument that has
            to be formatted.

.<width_aft>:
   .number  Decimal number specifying number of digits after decimal point.
   .*       The precision is not specified in the format string, but as an
            additional integer value argument preceding the argument that has
            to be formatted.

Format specifier can be:
   f   Convert to decimal notation in the style [-]ddd.ddd..
   g   Convert to shortest representation without any trailing zeroes.

Examples:
   +"%f" & 1234.5                       "1234.50000"
   +"%g" & 1234.5                       "1234.5"
   +"%10.3f" & 1234.5                   "  1234.500"
   +"%10.3g" & 1234.5                   "    1234.5"
   +"%010.3f" & 1234.5                  "001234.500"
   +"%_010.3g" & 1234.5                 "00_001_234.5"

------------------------------
Format sequences for time type
------------------------------
%[picture]

Picture is a string to describe date and time output format. The string
is a set of standard character and special tag that are replaced by the
corresponding values. Here are the recognized directives :
   %%   A literal '%' character.
   \n   A newline.
   \t   A horizontal tab.

Date & time fields:
   %a   The abbreviated name of the day of the week according to the
        current locale.
   %A   The full name of the day of the week according to the current
        locale.
   %b   The abbreviated month name according to the current locale.
   %B   The full month name according to the current locale.
   %c   The preferred date and time representation for the current
        locale.
   %C   The century number (year/100) as a 2-digit integer.
   %d   The day of the month as a decimal number (01 .. 31).
   %D   Equivalent to %m/%d/%y.
   %e   Like %d, the day of the month as a decimal number, but a leading
        zero is replaced by a space ( 1 .. 31).
   %F   Equivalent to %Y-%m-%d (the ISO 8601 date format).
   %h   Equivalent to %b.
   %H   The hour as a decimal number using a 24-hour clock (00 .. 23).
   %I   The hour as a decimal number using a 12-hour clock (01 .. 12).
   %j   The day of the year as a decimal number (001 .. 366).
   %k   The hour (24-hour clock) as a decimal number ( 0 .. 23);
        single digits are preceded by a blank.
   %l   The hour (12-hour clock) as a decimal number ( 1 .. 12);
        single digits are preceded by a blank.
   %m   The month as a decimal number (01 .. 12).
   %M   The minute as a decimal number (00 .. 59).
   %p   Either "AM" or "PM" according to the given time value, or the
        corresponding strings for the current locale.
        Noon is treated as "PM" and midnight as "AM".
   %P   Like %p but in lowercase: "am" or "pm" or a corresponding string
        for the current locale.
   %r   The time in 12-hour notation. (In the POSIX locale this is
        equivalent to %I:%M:%S %p.)
   %R   The time in 24-hour notation (%H:%M).
   %s   The number of seconds since the Epoch,
        1970-01-01 00:00:00 +0000 (UTC).
   %S   The second as a decimal number (00 .. 59).
   %T   The time in 24-hour notation (%H:%M:%S).
   %u   The day of the week as a decimal (1 .. 7), Monday being 1.
   %U   The week number of the current year as a decimal number
        (00 .. 53), starting with the first Sunday as the first day of
        week 01.
   %w   The day of the week as a decimal (0 .. 6), Sunday being 0.
   %W   The week number of the current year as a decimal number
        (00 .. 53), starting with the first Monday as the first day of
        week 01.
   %x   The preferred date representation for the current locale without
        the time. (In the POSIX locale this is equivalent to %m/%d/%y.)
   %X   The preferred time representation for the current locale without
        the date. (In the POSIX locale this is equivalent to %H:%M:%S.)
   %y   The year as a decimal number without a century (00 .. 99).
   %Y   The year as a decimal number including the century.
   %z   The +hhmm or -hhmm numeric timezone (that is, the hour and
        minute offset from UTC).
   %Z   The timezone name (e.g., UTC+02:00)

Additional time fields:
   %i   The milliseconds as a decimal number (000 .. 999).
   %o   The microseconds as a decimal number (000000 .. 999999).
   %N   The nanoseconds as a decimal number (000000000 .. 999999999).

Modifiers:
    O   Use alternative numeric symbols.

The following flag characters are permitted:
    -   (hyphen) Do not pad a numeric result string.
    _   (underscore) Pad a numeric result string with spaces.
    0   (zero) Pad a numeric result string with zeros.

